#!/usr/bin/python


import os
class Config :
	useTidy = False
	server = "www.blogger.com"
	login = "yourname@gmail.com"
	targetDir = "blogdump/"

	if os.access("blogger2wiko.config", os.R_OK) :
		execfile("blogger2wiko.config")

import sys
try:
	from xml.etree import ElementTree # for Python 2.5 users
except:
	from elementtree import ElementTree
try:
	import gdata
	import gdata.service
except:
	print >> sys.stderr, "Execution failed: gdata python module not found"
	sys.exit()
try:
	from PyQt4.QtCore import *
	from PyQt4.QtGui import *
except:
	print >> sys.stderr, "Execution failed: This script requires PyQt4 installed"
	sys.exit()

def buddyFor(widget, labelText) :
	label = QLabel(labelText)
	label.setBuddy(widget)
	return label

class LoginPage(QWizardPage) :
	def __init__(self, parent=None) :
		QWizardPage.__init__(self, parent)
		self.setTitle("Validation")
		self.setSubTitle("Introduce the login information for blogger.com.")

		self.server = QLineEdit(self)
		serverLabel = buddyFor(self.server,"Server")
		self.login = QLineEdit(self)
		loginLabel = buddyFor(self.login,"Login")
		self.passwd = QLineEdit(self)
		self.passwd.setEchoMode(self.passwd.Password)
		passwdLabel = buddyFor(self.passwd,"Password")
		self.errorMessage=QLabel("")

		layout = QGridLayout(self)
		self.setLayout(layout)
		layout.addWidget(serverLabel, 0, 0)
		layout.addWidget(self.server, 0, 1)
		layout.addWidget(loginLabel, 1, 0)
		layout.addWidget(self.login, 1, 1)
		layout.addWidget(passwdLabel, 2, 0)
		layout.addWidget(self.passwd, 2, 1)
		layout.addWidget(self.errorMessage, 3, 1)

		self.registerField("Server", self.server)
		self.registerField("Login", self.login)
		self.registerField("Password", self.passwd)

		self.server.setText(Config.server)
		self.login.setText(Config.login)
		self.passwd.setText("")
		self.setCommitPage(True)
		self.setButtonText(QWizard.CommitButton, "&Connect")

	def validatePage(self) :
		self.updateStatus("Validating user...", "blue")
		try :
			self.wizard().login(self.login.text(), self.passwd.text(), self.server.text())
		except Exception, error:
			self.updateStatus(error, "red")
			return False
		self.updateStatus("Logged in", "green")
		return True

	def updateStatus(self, message, color) :
		self.errorMessage.setText("<span style='color:%s'>%s</span>"%(color,message))
		# Force a widget update before continuing (proper way?)
		QApplication.sendPostedEvents()
		QApplication.processEvents()

class BlogSelectionPage(QWizardPage) :
	def __init__(self, parent=None) :
		QWizardPage.__init__(self, parent)
		self.setTitle("Blog selection")
		self.setSubTitle("Choose the blog you want to export")

		self.blogList = QListWidget(self)
		layout = QVBoxLayout(self)
		self.setLayout(layout)
		layout.addWidget(self.blogList)

		self.registerField("Blog*", self.blogList)

	def initializePage(self) :
		blogs = self.wizard().getBlogList()
		for title, url, id in blogs :
			print title, url, id
			item = QListWidgetItem(title)
			item.setData(Qt.UserRole, QVariant(id))
			self.blogList.addItem(item)

	def validatePage(self) :
		item = self.blogList.item(self.blogList.currentRow())
		self.wizard().blogId = str(item.data(Qt.UserRole).toString())
		print item.text(), self.wizard().blogId
		return True

class DirectoryPage(QWizardPage) :
	def __init__(self, parent=None) :
		QWizardPage.__init__(self, parent)
		self.setTitle("Destination directory")
		self.setSubTitle("Choose the directory where you want to dump the blog into")

		self.fileedit = QLineEdit(self)
		self.completer = QCompleter(self)
		self.completer.setModel(QDirModel(self.completer));
		self.fileedit.setCompleter(self.completer);
		self.pushButton = QPushButton(self)
		self.pushButton.setText('&Choose')
		self.error = QLabel(self)
		layoutV = QVBoxLayout(self)
		layout = QHBoxLayout(self)
		layoutV.addLayout(layout)
		layoutV.addWidget(self.error)
		layout.addWidget(self.fileedit)
		layout.addWidget(self.pushButton)
		self.setLayout(layoutV)

		self.connect(self.pushButton,SIGNAL("clicked()"),
			self.chooseDirectory)
		self.registerField("Directory*", self.fileedit)

		self.setCommitPage(True)
		self.setButtonText(QWizard.CommitButton, "&Export")


	def chooseDirectory(self) :
		directory = QFileDialog.getExistingDirectory(self, "Choose a directory")
		if directory : self.fileedit.setText(directory)
		pass	

	def initializePage(self) :
		self.fileedit.setText(self.wizard().targetDir)

	def isComplete(self) :
		from os.path import isdir
		from os import access, W_OK
		targetdir = str(self.fileedit.text())
		self.emit(SIGNAL("isComplete()"))
		if not isdir(targetdir):
			self.error.setText("<span style='color:red'>Directory does not exist</span>")
			return False
		if not access(targetdir, W_OK) :
			self.error.setText("<span style='color:red'>Directory can not be written</span>")
			return False
		self.error.setText("")
		return True

	def validatePage(self) :
		targetdir = str(self.fileedit.text())
		self.wizard().targetDir = targetdir
		return True

class RunPage(QWizardPage) :
	def __init__(self, parent=None) :
		QWizardPage.__init__(self, parent)
		self.setTitle("Execution")
		self.setSubTitle("Exporting the blog into your file system")

		self.log = QTextEdit(self)
		self.log.setReadOnly(True)
		self.log.setText("Exporting...")

		layout = QHBoxLayout(self)
		self.setLayout(layout)
		layout.addWidget(self.log)

	def isComplete(self) :
		for action in self.wizard().dump(stepped=True) :
			print "Execution", action
			self.log.append(action)
			QApplication.sendPostedEvents()
			QApplication.processEvents()
		return True


	def initializePage(self) :
		pass

	

class BloggerImportWizard (QWizard) :

	def login(self, user, password, server) :
		self.service = gdata.service.GDataService(user, password)
		self.service.source = 'WiKo'
		self.service.service = 'blogger'
		self.service.server = unicode(server)
		self.service.ProgrammaticLogin()

	def getBlogList(self) :
		query = gdata.service.Query()
		query.feed = '/feeds/default/blogs'
		feed = self.service.Get(query.ToUri())
		blogs = [ 
			(
				entry.title.text, 
				entry.GetSelfLink().href,
				entry.GetSelfLink().href.split('/')[-1],
			) for entry in feed.entry ]
		return blogs

	def __init__(self, parent=None) :
		QWizard.__init__(self)
		self.setWindowTitle("Blogger.com to WiKo")
#		self.setPixmap(self.LogoPixmap, QPixmap("blogger_logo_small.png"))
		self.setPixmap(self.WatermarkPixmap, QPixmap("web/wikologo.png"))
		self.blogId = None
		self.service = None
		self.targetDir = ""

		page = QWizardPage(self)
		page.setTitle("Introduction")
		layout = QVBoxLayout()
		page.setLayout(layout);
		label = QLabel(
			"""<p>This wizard will help you export your blog at blogger.com
				into a set of files which are able to be processed by WiKo.
				Note that once you export the files, you can still keep them
				up to date.</p>
				<p>Visit <a href='http://wiko.sourceforge.net'>WiKo web page</a>
				for further information.</p>
			""")
		label.setWordWrap(True)
		layout.addWidget(label)

		self.introPage  = self.addPage(page)
		self.loginPage  = self.addPage(LoginPage(self))
		self.blogPage   = self.addPage(BlogSelectionPage(self))
		self.targetPage = self.addPage(DirectoryPage(self))
		self.runPage = self.addPage(RunPage(self))

	def permaFormTitle(self, title) :
		filetitle = unicode(title, 'utf-8')
		filetitle = filetitle.lower().strip()
		# Turn punctuation into spaces
		for char in ur"!,()./\:?" :
			filetitle = filetitle.replace(char, u" ")
		# Simplify spaces (a better function for that?
		filetitle = filetitle.strip()
		filetitle = filetitle.replace(u'  ', u' ')
		filetitle = filetitle.replace(u'  ', u' ')
		filetitle = filetitle.replace(u'  ', u' ')
		# Turn any space into hyphen
		filetitle = filetitle.replace(u' ', u'-')
		return filetitle

	def dump(self, stepped=False) :
		if stepped :
			yield "Fetching blog %s"%self.blogId

		# TODO: The 'next' link indicates that there are more entries to fetch
		feed = self.service.GetFeed('/feeds/%s/posts/default?max-results=1000' % self.blogId )
#		feed = self.service.GetFeed('/feeds/%s/archive' % self.blogId )

		import codecs, datetime
		import os.path
		configfilename = os.path.join(self.targetDir,"blog.config")
		blogconfig=codecs.open(configfilename,'w','utf-8')
		links = dict([(link.rel, link.href) for link in feed.link])
		if stepped : yield "Title: '%s' Subtitle: '%s'" % ( feed.title.text, feed.subtitle.text)
		def dumpConfig(name, value) :
			print >> blogconfig, u"%s = '%s'" % (name, unicode(value,'utf-8'))
		dumpConfig("blogid", feed.id.text)
		dumpConfig("title", feed.title.text)
		dumpConfig("description", feed.subtitle.text)
		dumpConfig("generator", feed.generator.text) # TODO: blogger2wiko?
		dumpConfig("editor", ', '.join([author.name.text for author in feed.author]))
		dumpConfig("editorEmail", ', '.join([author.email.text for author in feed.author]))
		dumpConfig("editorUri", ', '.join([author.uri.text for author in feed.author]))
		dumpConfig("blogtags", ', '.join([category.text for category in feed.category if category.text is not None]))
		dumpConfig("contributor", ', '.join([contributor.name.text for contributor in feed.contributor]))
		dumpConfig("homeurl", links['alternate'])
		dumpConfig("updated", feed.updated.text)
		print "\n".join(str(link) for link in feed.link)
		blogconfig.close()
		import string
		for entry in feed.entry:
			id = int(entry.id.text.split("-")[-1])
			print entry.title.text
			title = entry.title.text or u"No title"
			filename = u"blog-%019i-%s.wiki"%(id, self.permaFormTitle(title))
			fullfilename = os.path.join(self.targetDir,filename)
			if stepped: yield "Generating " + filename
			blogfile=codecs.open(fullfilename,'w','utf-8')
			def dumpBlogVar(name, value) :
				print >> blogfile, u"@%s: %s"%(name, unicode(value,'utf-8'))
			dumpBlogVar("id", str(id))
			dumpBlogVar("author", (", ".join([author.name.text for author in entry.author])))
#			dumpBlogVar("authoremail", (", ".join([author.email.text for author in entry.author if author.email])))
#			dumpBlogVar("authoruri", (", ".join([author.uri.href for author in entry.author if author.uri])))
#			dumpBlogVar("contributor", (", ".join([contrib.name.text for contrib in entry.contributor])))
#			dumpBlogVar("source", entry.source and entry.source.text)
			dumpBlogVar("title", title)
			dumpBlogVar("updated", datetime.datetime.strptime(entry.updated.text[:19], "%Y-%m-%dT%H:%M:%S").strftime("%Y-%m-%d %H:%M:%S"))
			dumpBlogVar("published", datetime.datetime.strptime(entry.published.text[:19], "%Y-%m-%dT%H:%M:%S").strftime("%Y-%m-%d %H:%M:%S"))
			dumpBlogVar("tags", (", ".join([category.term for category in entry.category])))
			print >> blogfile
			content = self.wikify(unicode(entry.content.text,'utf-8'))
			print >> blogfile, content
			blogfile.close()
		for comment in self.getComments() :
			commentfilename = os.path.join(self.targetDir,"blog-%(inreplyto)019i-%(id)s.comment"%comment)
			print "Generating comment %s"%commentfilename
			commentfile=codecs.open(commentfilename,'w','utf-8')
			for key in [
				'id',
				"inreplyto",
				"title",
				"published",
				"updated",
				"author",
				"authoruri",
				"authoremail",
				] :
				print >> commentfile, "@%s:"%key, unicode(str(comment[key]),'utf-8')
			print >> commentfile
			print >> commentfile, unicode(comment['content'],'utf-8')

	def wikify(self, content) :
		if Config.useTidy:
			# TODO: This crashes (core dump!) for some files
			import tidy
			tidyOptions = dict(
				output_xhtml=1, 
				show_body_only=1,
				indent=1,
				tidy_mark=0,
				)
			tidy.parseString(content+"\n", **tidyOptions)
		import re
		substitutions = [
			(ur'<a\s+href\s*=\s*"([^"]+)">([^<]+)\s*<\s*/\s*a\s*>', ur"[[\1 \2]]"),
			(ur"<a\s+href\s*=\s*'([^']+)'>([^<]+)\s*<\s*/\s*a\s*>", ur"[[\1 \2]]"),
			(ur'<br />', "\n"),
			(u'<p>', "\n\n"),
			(u'</p>', ""),
#			(u'<pre>', "Code:\n"),
#			(u'</pre>', ""),
			(u'%', '%%'),
		]
		substitutions = [(re.compile(old), new) for old, new in substitutions]
		for old, new in substitutions :
			content = old.sub(new, content)
		return content

	def getComments(self, postId=None) :
		# Build comment feed URI and request comments on the specified post
		feed_url = '/feeds/' + self.blogId
		feed_url+= "" if postId is None else '/' + postId
		feed_url+='/comments/default?max-results=1000'
		feed = self.service.Get(feed_url)
		ignoredComments = len(feed.entry)-len([entry for entry in feed.entry if entry.extension_elements])
		if ignoredComments :
			print >> sys.stderr, "Warning: ignoring", ignoredComments, "comment(s) that didn't refer the original article"
		return [ dict(
			id = entry.id.text.split("-")[-1],
			title = entry.title.text,
			published = entry.published.text,
			updated = entry.updated.text,
			content = self.wikify(entry.content.text),
			# If more extensions are added this might fail, should take the one with 'tag'=='in-reply-to'
			inreplyto = int(entry.extension_elements[0].attributes['ref'].split("-")[-1]),
			author = ",".join([author.name.text for author in entry.author]),
			authoremail = ",".join([(author.email and author.email.text) or "" for author in entry.author]),
			authoruri = ",".join([(author.uri and author.uri.text) or "" for author in entry.author]),
			) for entry in feed.entry
			if entry.extension_elements # should have the in-reply-to element
			]

def main():
	app=QApplication(sys.argv)
	wizard = BloggerImportWizard()
	wizard.targetDir= Config.targetDir
	if wizard.exec_() != QDialog.Accepted :
		exit(-1)
	exit(0)

if __name__ == '__main__':
	main()


